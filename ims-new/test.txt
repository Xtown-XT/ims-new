header:
/* HeaderBar.jsx */
import {
  LogoutOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  UserOutlined,
} from '@ant-design/icons';
import { Dropdown, Menu, message } from 'antd';

const HeaderBar = ({ collapsed, toggleCollapsed }) => {
  const handleMenuClick = ({ key }) => {
    if (key === 'logout') {
      message.success('Logged out');
    }
  };

  const userMenu = (
    <Menu onClick={handleMenuClick}>
      <Menu.Item key="profile" icon={<UserOutlined />}>
        Profile
      </Menu.Item>
      <Menu.Item key="logout" icon={<LogoutOutlined />} danger>
        Logout
      </Menu.Item>
    </Menu>
  );

  return (
    <div className="bg-gray-800 px-4 flex justify-between items-center shadow-lg h-16">
      <button onClick={toggleCollapsed} className="text-2xl text-white hover:text-purple-300 transition-colors">
        {collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
      </button>

      <div className="flex items-center gap-4">
        <Dropdown overlay={userMenu} placement="bottomRight" trigger={['click']}>
          <UserOutlined className="cursor-pointer text-white hover:text-purple-300 text-3xl transition-colors" />
        </Dropdown>
      </div>
    </div>
  );
};

export default HeaderBar;

sidenave:

/* Sidebar.jsx */
import { Menu } from "antd";
import { useNavigate, useLocation } from "react-router-dom";

const Sidebar = ({ collapsed, menuItems }) => {
  const navigate = useNavigate();
  const { pathname } = useLocation();

  return (
    <div className="bg-white shadow-lg h-full">
      {!collapsed ? (
        <div className="h-16 flex justify-center items-center text-center text-xl font-bold border-b text-purple-700">
          Business Suite
        </div>
      ) : (
        <div className="h-16" />
      )}

      <Menu
        mode="inline"
        inlineCollapsed={collapsed}
        selectedKeys={[pathname]}
        defaultOpenKeys={menuItems.map((item) => item.key)}
        items={menuItems}
        onClick={({ key }) => navigate(key)}
        className="pt-2"
        style={{
          '--antd-menu-item-selected-bg': '#f3e8ff', /* Light purple */
          '--antd-menu-item-color': '#7c3aed', /* Purple */
          '--antd-menu-item-active-bg': '#f3e8ff', /* Light purple */
          '--antd-menu-item-selected-color': '#5b21b6', /* Dark purple */
          '--antd-menu-item-hover-bg': '#f1f5f9', /* Light grey */
        }}
      />
    </div>
  );
};

export default Sidebar;



footer:


/* Footer.jsx */
import { Layout } from 'antd';

const { Footer } = Layout;

const AppFooter = () => {
  return (
    <Footer className="bg-gray-800 text-white text-center py-2 shadow-inner">
            <div className="flex justify-center gap-2">

        <p className="text-sm">Â© 2025 Business Suite. All rights reserved.</p>
          <a href="#" className="text-purple-300 hover:text-purple-100 transition-colors">Privacy Policy</a>
          <a href="#" className="text-purple-300 hover:text-purple-100 transition-colors">Terms of Service</a>
          <a href="#" className="text-purple-300 hover:text-purple-100 transition-colors">Contact Us</a>
        </div>
    </Footer>
  );
};

export default AppFooter;




layout:
/* MainLayout.jsx */
import { Layout, ConfigProvider } from "antd";
import { useState } from "react";
import { Outlet } from "react-router-dom";
import Sidebar from "./Sidebar";
import HeaderBar from "./Header";
import AppFooter from "./Footer";

const { Sider, Content } = Layout;

const MainLayout = ({ menuItems }) => {
  const [collapsed, setCollapsed] = useState(false);
  const toggleCollapsed = () => setCollapsed(!collapsed);

  // Custom Ant Design theme
  const theme = {
    token: {
      colorPrimary: '#7c3aed',
      colorLink: '#7c3aed',
      colorLinkHover: '#5b21b6',
      borderRadius: 6,
    },
    components: {
      Menu: {
        // Menu item customization
        colorItemBg: 'transparent',
        colorItemText: '#4b5563',
        colorItemTextSelected: '#7c3aed',
        colorItemBgSelected: '#f3e8ff',
        colorItemTextHover: '#7c3aed',
        colorItemBgHover: '#f9fafb',
        itemSelectedColor: '#5b21b6',
        itemHoverColor: '#7c3aed',
        subMenuItemBg: 'transparent',
      }
    }
  };

  return (
    <ConfigProvider theme={theme}>
      <Layout className="min-h-screen">
        <Sider
          trigger={null}
          collapsible
          collapsed={collapsed}
          width={240}
          collapsedWidth={80}
          className="shadow-lg overflow-hidden"
          style={{
            position: 'fixed',
            left: 0,
            top: 0,
            bottom: 0,
            zIndex: 100,
            backgroundColor: '#fff',
          }}
        >
          <Sidebar collapsed={collapsed} menuItems={menuItems} />
        </Sider>

        <Layout
          style={{
            marginLeft: collapsed ? 80 : 240,
            transition: 'margin-left 0.3s',
            backgroundColor: '#f9fafb',
          }}
        >
          <HeaderBar collapsed={collapsed} toggleCollapsed={toggleCollapsed} />
          <Content
            style={{
              padding: '1px',
              backgroundColor: '#f9fafb',
              minHeight: 'calc(100vh - 112px)',
              overflow: 'auto',
              position: 'relative',
            }}
          >
            <div className="bg-white rounded-lg shadow p-6 min-h-full">
              <Outlet />
            </div>
          </Content>
          <AppFooter />
        </Layout>
      </Layout>
    </ConfigProvider>
  );
};

export default MainLayout;





# Division API Documentation

## Overview
This document outlines the REST API endpoints for managing divisions in the Smart Stitch Monitoring System.

## Base URL
```
http://localhost:3000/api/v1/company_ms/division
```

## Authentication
All endpoints require JWT authentication (currently commented out in routes).
Include the JWT token in the Authorization header:
```
Authorization: Bearer <your-jwt-token>
```

## Data Validation
All requests are validated using Zod schemas. Invalid requests will return a 422 error with validation details.

## Endpoints

### 1. Create Division
**POST /**

Creates a new division.

#### Request Body Schema
```json
{
    "name": "string (2-100 chars)",
    "head_of_division": "number (optional)",
    "phone": "string (optional)",
    "email": "string (valid email, optional)",
    "status": "string",
    "created_by": "number"
}
```

#### Example Request
```powershell
$body = @{
    name = "Manufacturing Division"
    head_of_division = 1
    phone = "+91-9876543210"
    email = "manufacturing@ssms.com"
    status = "Active"
    created_by = 1
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/division" -Method Post -Body $body -ContentType "application/json"
```

#### Success Response (201 Created)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "name": "Manufacturing Division",
        "head_of_division": 1,
        "phone": "+91-9876543210",
        "email": "manufacturing@ssms.com",
        "status": "Active",
        "is_active": true,
        "created_at": "2025-05-25T10:30:00.000Z",
        "updated_at": null,
        "deleted_at": null,
        "created_by": 1,
        "updated_by": null,
        "deleted_by": null
    }
}
```

### 2. List/Filter Divisions
**GET /**

Retrieves a list of divisions with pagination and filtering options.

#### Query Parameters
| Parameter   | Type    | Default | Description |
|------------|---------|---------|-------------|
| page       | number  | 1       | Page number |
| limit      | number  | 10      | Items per page |
| search     | string  | ""      | Search in name/email/phone |
| sort_by    | string  | "created_at" | Field to sort by |
| sort_order | string  | "desc"  | "asc" or "desc" |
| status     | string  | null    | Filter by status |
| from_date  | string  | null    | Start date (YYYY-MM-DD) |
| to_date    | string  | null    | End date (YYYY-MM-DD) |
| is_pdf     | boolean | false   | Export as PDF |
| is_excel   | boolean | false   | Export as Excel |

#### Example Requests

1. List with pagination:
```
GET /api/v1/company_ms/division?page=1&limit=10
```

2. Search and filter:
```
GET /api/v1/company_ms/division?search=manufacturing&status=Active
```

3. Export to Excel:
```
GET /api/v1/company_ms/division?is_excel=true
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "divisions": [
            {
                "id": 1,
                "name": "Manufacturing Division",
                "head_of_division": 1,
                "phone": "+91-9876543210",
                "email": "manufacturing@ssms.com",
                "status": "Active",
                "is_active": true,
                "created_at": "2025-05-25T10:30:00.000Z",
                "updated_at": null,
                "deleted_at": null,
                "created_by": 1,
                "updated_by": null,
                "deleted_by": null
            }
        ],
        "pagination": {
            "total": 1,
            "page": 1,
            "limit": 10,
            "totalPages": 1
        }
    }
}
```

### 3. Get Division by ID
**GET /:id**

Retrieves a specific division by ID.

#### Example Request
```powershell
Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/division/1" -Method Get
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "name": "Manufacturing Division",
        "head_of_division": 1,
        "phone": "+91-9876543210",
        "email": "manufacturing@ssms.com",
        "status": "Active",
        "is_active": true,
        "created_at": "2025-05-25T10:30:00.000Z",
        "updated_at": null,
        "deleted_at": null,
        "created_by": 1,
        "updated_by": null,
        "deleted_by": null
    }
}
```

### 4. Update Division
**PUT /:id**

Updates an existing division.

#### Request Body Schema
```json
{
    "name": "string (2-100 chars, optional)",
    "head_of_division": "number (optional)",
    "phone": "string (optional)",
    "email": "string (valid email, optional)",
    "status": "string (optional)",
    "updated_by": "number"
}
```

#### Example Request
```powershell
$body = @{
    name = "Manufacturing & Operations"
    status = "Active"
    updated_by = 1
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/division/1" -Method Put -Body $body -ContentType "application/json"
```

### 5. Delete Division
**DELETE /:id**

Soft deletes a division.

#### Example Request
```powershell
Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/division/1" -Method Delete
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "is_active": false,
        "deleted_at": "2025-05-25T12:30:00.000Z",
        "deleted_by": 1
    }
}
```

### 6. Restore Division
**PATCH /:id**

Restores a soft-deleted division.

#### Example Request
```powershell
Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/division/1" -Method Patch
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "is_active": true,
        "deleted_at": null,
        "deleted_by": null,
        "updated_at": "2025-05-25T13:30:00.000Z",
        "updated_by": 1
    }
}
```

## Error Responses

### Validation Error (422)
```json
{
    "success": false,
    "status": 422,
    "message": "Validation failed",
    "validationErrors": [
        {
            "path": "email",
            "message": "Invalid email format"
        }
    ]
}
```

### Not Found Error (404)
```json
{
    "success": false,
    "status": 404,
    "message": "Division not found"
}
```

### Server Error (500)
```json
{
    "success": false,
    "status": 500,
    "message": "Internal Server Error"
}
```

## File Export Formats

### Excel Export
- Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
- Filename: divisions_[timestamp].xlsx
- Columns: ID, Name, Head of Division, Phone, Email, Status, Created At

### PDF Export
- Content-Type: application/pdf
- Filename: divisions_[timestamp].pdf
- Columns: ID, Name, Phone, Email, Status

## Implementation Notes
1. All dates are in ISO format and UTC timezone
2. The `deleted_at` field indicates soft deletion
3. File exports are temporarily stored and automatically cleaned up after sending
4. Search functionality is case-insensitive
5. JWT authentication is currently commented out but should be enabled in production



















# Department API Documentation

## Overview
This Invoke-RestMethod -Uri "http://localhost:3000/apiGET /GET /GET /api/v1/company_ms/department?is_excel=Invoke-RestMethod -Uri "http://localhost:3000/api/v1Invoke-ResInvoke-RestMethod -Uri Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/department/1" -Method Patchhttp://localhost:3000/api/v1/company_ms/department/1" -Method DeleteMethod -Uri "http://localhost:3000/api/v1/company_ms/department/1" -Method Put -Body $body -ContentType "application/json"company_ms/department/1" -Method Getruepi/v1/company_ms/department?search=production&status=Activepi/v1/company_ms/department?page=1&limit=10v1/company_ms/department" -Method Post -Body $body -ContentType "application/json"ocument outlines the REST API endpoints for managing departments in the Smart Stitch Monitoring System.

## Base URL
```
http://localhost:3000/api/v1/company_ms/department
```

## Authentication
All endpoints require JWT authentication (currently commented out in routes).
Include the JWT token in the Authorization header:
```
Authorization: Bearer <your-jwt-token>
```

## Data Validation
All requests are validated using Zod schemas. Invalid requests will return a 422 error with validation details.

## Endpoints

### 1. Create Department
**POST /**

Creates a new department.

#### Request Body Schema
```json
{
    "name": "string (2-100 chars)",
    "description": "string (optional)",
    "head_of_department": "number (optional)",
    "phone": "string",
    "email": "string (valid email)",
    "status": "string",
    "created_by": "number"
}
```

#### Example Request
```powershell
$body = @{
    name = "Production Department"
    description = "Main production floor operations"
    head_of_department = 1
    phone = "+91-9876543210"
    email = "production@ssms.com"
    status = "Active"
    created_by = 1
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/department" -Method Post -Body $body -ContentType "application/json"
```

#### Success Response (201 Created)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "name": "Production Department",
        "description": "Main production floor operations",
        "head_of_department": 1,
        "phone": "+91-9876543210",
        "email": "production@ssms.com",
        "status": "Active",
        "is_active": true,
        "created_at": "2025-05-25T10:30:00.000Z",
        "updated_at": null,
        "deleted_at": null,
        "created_by": 1,
        "updated_by": null,
        "deleted_by": null
    }
}
```

### 2. List/Filter Departments
**GET /**

Retrieves a list of departments with pagination and filtering options.

#### Query Parameters
| Parameter   | Type    | Default | Description |
|------------|---------|---------|-------------|
| page       | number  | 1       | Page number |
| limit      | number  | 10      | Items per page |
| search     | string  | ""      | Search in name/email/phone |
| sort_by    | string  | "created_at" | Field to sort by |
| sort_order | string  | "desc"  | "asc" or "desc" |
| status     | string  | null    | Filter by status |
| from_date  | string  | null    | Start date (YYYY-MM-DD) |
| to_date    | string  | null    | End date (YYYY-MM-DD) |
| is_pdf     | boolean | false   | Export as PDF |
| is_excel   | boolean | false   | Export as Excel |

#### Example Requests

1. List with pagination:
```
GET /api/v1/company_ms/department?page=1&limit=10
```

2. Search and filter:
```
GET /api/v1/company_ms/department?search=production&status=Active
```

3. Export to Excel:
```
GET /api/v1/company_ms/department?is_excel=true
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "departments": [
            {
                "id": 1,
                "name": "Production Department",
                "description": "Main production floor operations",
                "head_of_department": 1,
                "phone": "+91-9876543210",
                "email": "production@ssms.com",
                "status": "Active",
                "is_active": true,
                "created_at": "2025-05-25T10:30:00.000Z",
                "updated_at": null,
                "deleted_at": null,
                "created_by": 1,
                "updated_by": null,
                "deleted_by": null
            }
        ],
        "pagination": {
            "total": 1,
            "page": 1,
            "limit": 10,
            "totalPages": 1
        }
    }
}
```

### 3. Get Department by ID
**GET /:id**

Retrieves a specific department by ID.

#### Example Request
```powershell
Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/department/1" -Method Get
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "name": "Production Department",
        "description": "Main production floor operations",
        "head_of_department": 1,
        "phone": "+91-9876543210",
        "email": "production@ssms.com",
        "status": "Active",
        "is_active": true,
        "created_at": "2025-05-25T10:30:00.000Z",
        "updated_at": null,
        "deleted_at": null,
        "created_by": 1,
        "updated_by": null,
        "deleted_by": null
    }
}
```

### 4. Update Department
**PUT /:id**

Updates an existing department.

#### Request Body Schema
```json
{
    "name": "string (2-100 chars, optional)",
    "description": "string (optional)",
    "head_of_department": "number (optional)",
    "phone": "string (optional)",
    "email": "string (valid email, optional)",
    "status": "string (optional)",
    "updated_by": "number"
}
```

#### Example Request
```powershell
$body = @{
    name = "Production & Operations"
    status = "Active"
    updated_by = 1
} | ConvertTo-Json

Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/department/1" -Method Put -Body $body -ContentType "application/json"
```

### 5. Delete Department
**DELETE /:id**

Soft deletes a department.

#### Example Request
```powershell
Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/department/1" -Method Delete
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "is_active": false,
        "deleted_at": "2025-05-25T12:30:00.000Z",
        "deleted_by": 1
    }
}
```

### 6. Restore Department
**PATCH /:id**

Restores a soft-deleted department.

#### Example Request
```powershell
Invoke-RestMethod -Uri "http://localhost:3000/api/v1/company_ms/department/1" -Method Patch
```

#### Success Response (200 OK)
```json
{
    "success": true,
    "data": {
        "id": 1,
        "is_active": true,
        "deleted_at": null,
        "deleted_by": null,
        "updated_at": "2025-05-25T13:30:00.000Z",
        "updated_by": 1
    }
}
```

## Error Responses

### Validation Error (422)
```json
{
    "success": false,
    "status": 422,
    "message": "Validation failed",
    "validationErrors": [
        {
            "path": "email",
            "message": "Invalid email format"
        }
    ]
}
```

### Not Found Error (404)
```json
{
    "success": false,
    "status": 404,
    "message": "Department not found"
}
```

### Server Error (500)
```json
{
    "success": false,
    "status": 500,
    "message": "Internal Server Error"
}
```

## File Export Formats

### Excel Export
- Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
- Filename: departments_[timestamp].xlsx
- Columns: ID, Name, Description, Head of Department, Phone, Email, Status, Created At

### PDF Export
- Content-Type: application/pdf
- Filename: departments_[timestamp].pdf
- Columns: ID, Name, Phone, Email, Status

## Implementation Notes
1. All dates are in ISO format and UTC timezone
2. The `deleted_at` field indicates soft deletion
3. File exports are temporarily stored and automatically cleaned up after sending
4. Search functionality is case-insensitive
5. JWT authentication is currently commented out but should be enabled in 






# Machine API Documentation

This document provides details about the SSMS Machine API endpoints in the SSMS Machine Service.

## Base URL

```
http://localhost/api/v1/ssms/machine
```

## Data Types

### Machine Object

```json
{
            "id": 1,
            "company_id": 1,
            "division_id": 1,
            "branch_id": 1,
            "department_id": 1,
            "line_id": 2,
            "machine_name": "string1",
            "machine_type": "string",
            "location": "string",
            "serial_number": 12,
            "purchase_date": "2025-05-29T04:53:23.444Z",
            "status": "active",
            "is_active": true,
            "created_at": "2025-05-29T04:53:23.444Z",
            "updated_at": "2025-05-29T04:54:52.551Z",
            "created_by": 1,
            "updated_by": 1,
            "deleted_at": null,
            "deleted_by": null,
            "company": {
                "id": 1,
                "name": "Acme Garments Pvt. Ltd.",
                "short_name": "Acme",
                "address_line1": "123 Textile Road",
                "address_line2": "Unit 5B",
                "city": 10,
                "state": 5,
                "pincode": 560037,
                "country": 1,
                "phone": "08012345678",
                "email": "contact@acmegarments.com",
                "gst_no": "29ABCDE1234F1Z5",
                "status": "Active",
                "logo": "https://cdn.example.com/logos/acme.png",
                "billing_address_line1": "123 Textile Road",
                "billing_address_line2": "Billing Dept.",
                "billing_city": 10,
                "billing_state": 5,
                "billing_pincode": 560037,
                "billing_country": 1,
                "is_active": true,
                "created_at": "2025-05-28T12:21:58.318Z",
                "updated_at": "2025-05-28T12:21:58.318Z",
                "deleted_at": null,
                "created_by": 1,
                "updated_by": null,
                "deleted_by": null
            },
            "division": {
                "id": 1,
                "name": "Division 342",
                "email": "deep@xtown.in",
                "phone": "6548928190",
                "head_of_division": null,
                "status": "active",
                "is_active": true,
                "created_at": "2025-05-28T12:16:33.194Z",
                "updated_at": "2025-05-28T12:16:33.196Z",
                "deleted_at": null,
                "created_by": 1,
                "updated_by": null,
                "deleted_by": null
            },
            "branch": {
                "id": 1,
                "name": "Main Branch",
                "description": "Primary distribution center",
                "head_of_branch": null,
                "phone": "09876543210",
                "email": "branch.manager@example.com",
                "status": "Active",
                "is_active": true,
                "created_at": "2025-05-28T12:34:48.013Z",
                "updated_at": "2025-05-28T12:34:48.014Z",
                "deleted_at": null,
                "created_by": 1,
                "updated_by": null,
                "deleted_by": null
            },
            "department": {
                "id": 1,
                "name": "dp 1",
                "description": "aer",
                "head_of_department": null,
                "phone": "8944077269",
                "email": "dr69@gmail.com",
                "status": "Active",
                "is_active": true,
                "created_at": "2025-05-28T12:17:01.266Z",
                "updated_at": "2025-05-28T12:17:01.267Z",
                "deleted_at": null,
                "created_by": 1,
                "updated_by": null,
                "deleted_by": null
            },
            "line": {
                "id": 2,
                "line_name": "Cutting Line A",
                "ip_address": "192.168.1.100",
                "location": "Factory Floor 1",
                "company_id": 1,
                "division_id": 1,
                "branch_id": 1,
                "department_id": 1,
                "is_active": true,
                "status": "active",
                "created_at": "2025-05-28T12:35:56.063Z",
                "updated_at": "2025-05-28T12:35:56.063Z",
                "created_by": 1,
                "updated_by": 1,
                "deleted_at": null,
                "deleted_by": null
            }
        }
```

## Endpoints

### Create Machine

`POST /`

Creates a new SSMS machine.

#### Request Body

```json
{
  "machine_name": "string (required)",
  "machine_type": "string (required)",
  "location": "string (required)",
  "serial_number": "number (required, positive integer)",
  "purchase_date": "string (optional, ISO 8601 date)",
  "status": "string (required)",
  "company_id": "number (required, positive integer)",
  "division_id": "number (required, positive integer)",
  "branch_id": "number (required, positive integer)",
  "department_id": "number (required, positive integer)",
  "line_id": "number (required, positive integer)"
}
```

#### Response

```json
{
  "success": true,
  "data": {
    // Machine object
  }
}
```

### List Machines

`GET /`

Retrieves a list of machines with optional filtering, pagination, and export.

#### Query Parameters

* `page` (optional): Page number (default: 1)
* `limit` (optional): Items per page (default: 10)
* `search` (optional): Search term against `machine_name`, `machine_type`, `location`
* `sort_by` (optional): Field to sort by (default: `created_at`)
* `sort_order` (optional): Sort order (`asc`/`desc`, default: `desc`)
* `status` (optional): Filter by status string
* `company_id`, `division_id`, `branch_id`, `department_id`, `line_id`, `serial_number` (optional): Filter by respective IDs or serial number
* `from_date`, `to_date` (optional): Date range for `purchase_date` (YYYY-MM-DD)
* `is_pdf` (optional): `true` to export PDF
* `is_excel` (optional): `true` to export Excel

#### Response

```json
{
  "success": true,
  "data": {
    "machines": [
      // Array of machine objects
    ],
    "pagination": {
      "total": "number",
      "page": "number",
      "limit": "number",
      "totalPages": "number"
    }
  }
}
```

### Get Machine by ID

`GET /:id`

Retrieves a specific machine by ID.

#### Response

```json
{
  "success": true,
  "data": {
    // Machine object
  }
}
```

### Update Machine (Replace)

`PUT /:id`

Updates all fields of a machine. All fields are required.

#### Request Body

Same as Create Machine endpoint.

#### Response

```json
{
  "success": true,
  "data": {
    // Updated machine object
  }
}
```

### Partial Update Machine

`PATCH /:id`

Updates specific fields of a machine. All fields are optional.

#### Request Body

Same fields as Create Machine endpoint, but all optional.

#### Response

```json
{
  "success": true,
  "data": {
    // Updated machine object
  }
}
```

### Delete Machine

`DELETE /:id`

Soft deletes a machine by default. To hard-delete, include `?soft_delete=false`.

#### Response (Soft Delete)

```json
{
  "success": true,
  "data": {
    // Machine object with `is_active: false` and `deleted_at` timestamp
  }
}
```

#### Response (Hard Delete)

* HTTP 204 No Content

## Validation Rules

* `machine_name`: Required, string
* `machine_type`: Required, string
* `location`: Required, string
* `serial_number`: Required, positive integer
* `purchase_date`: Optional, ISO 8601 date string
* `status`: Required, string
* `company_id`, `division_id`, `branch_id`, `department_id`, `line_id`: Required, positive integers

## Error Responses

### 400 Bad Request

```json
{
  "success": false,
  "error": "Validation error message"
}
```

### 404 Not Found

```json
{
  "success": false,
  "error": "Machine not found"
}
```

### 500 Internal Server Error

```json
{
  "success": false,
  "error": "Error message"
}
```

### demo error message
```json
{
    "error": [
        {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
                "machine_name"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
                "machine_type"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "string",
            "received": "undefined",
            "path": [
                "location"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "number",
            "received": "undefined",
            "path": [
                "serial_number"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "number",
            "received": "undefined",
            "path": [
                "company_id"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "number",
            "received": "undefined",
            "path": [
                "division_id"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "number",
            "received": "undefined",
            "path": [
                "branch_id"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "number",
            "received": "undefined",
            "path": [
                "department_id"
            ],
            "message": "Required"
        },
        {
            "code": "invalid_type",
            "expected": "number",
            "received": "undefined",
            "path": [
                "line_id"
            ],
            "message": "Required"
        }
    ]
}
```